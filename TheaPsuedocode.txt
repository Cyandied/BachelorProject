class Branch {
    List<TableauxPart> tableauxParts;
    List<Endcase> endcases;
    Branch from;

    public Branch(TableauxPart start, Branch from){
        tableauxParts = new list(start)
        this.from = from
    }

    LinkedList<TableauxPart> upNext;

    public Branch NextStep(){
        LinkedList<Branch> returnBranches;

        if upNext.isEmpty {
            The branch is all done so we return null to indicate that it is all done
            return null
        }

        current = upNext[0]
        remove upNext[0]

        Perform tableaux rule
        If rule makes no new branches, this function returns its own branch
        If rule makes new branches, this function return a list of branches with (itself, branch 1, branch 2)
        
        If we find an endcase, we append them to the endcases list
        If we dont find an endcase, we append the expression to upNext as a TableauxPart
        
    }
}

class TableauxPart {
    Expression e;
    TableauxPart from;
}

class Endcase {
    our endcase class
}

class Tableaux {
    Branch start;
    List<Branch> branches;

    LinkedList<Branch> unfinishedBranches;

    public void DoTableaux(){
        We create our starting branch and add it to our list of branches that have not finished tableauxing

        start = new Branch(startExpression, null)
        unfinishedBranches.append(start)

        So long we have unfinished branches, we continue our tableaux
        while (unfinishedBranches.notEmpty){

            We get the current working branch, the first in the list. We do not remove this branch.
            curr = unfinishedBranches.getFirst

            We get the resulting branches, either null, itself, or a list of 3
            LinkedList<Branch> res = curr.NextStep()

            If we get null, we know the branch is done, so we remove it from the unfinished list and append it to our branches list
            if ( res == null ) {
                branches.append(curr)
                unfinishedBranches.remove(curr)
            }

            We check if we got any new branches and add them to our unfinished list if we got any new ones
            for ( branch in res ) {
                if ( branch not in unfinishedBranches ) {
                    unfinishedBranches.append(branch)
                }
            }

        }

    }

    Checks if tableaux is valid
    public bool IsValid(){
        We traverse the branches list in reverse, and go through the Branch.from and compare all endcases
        This way we do check the same branches more than once, but its be best I could come up with.
    }
}